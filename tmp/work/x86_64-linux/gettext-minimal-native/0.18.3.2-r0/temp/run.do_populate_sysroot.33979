def do_populate_sysroot(d):
    bb.build.exec_func("sysroot_stage_all", d)
    for f in (d.getVar('SYSROOT_PREPROCESS_FUNCS', True) or '').split():
        bb.build.exec_func(f, d)
    pn = d.getVar("PN", True)
    multiprov = d.getVar("MULTI_PROVIDER_WHITELIST", True).split()
    provdir = d.expand("/opt/yocto/poky/qemuarm/tmp/work/x86_64-linux/gettext-minimal-native/0.18.3.2-r0/sysroot-destdir//opt/yocto/poky/qemuarm/tmp/sysroots/x86_64-linux/sysroot-providers/")
    bb.utils.mkdirhier(provdir)
    for p in d.getVar("PROVIDES", True).split():
        if p in multiprov:
            continue
        p = p.replace("/", "_")
        with open(provdir + p, "w") as f:
            f.write(pn)

do_populate_sysroot(d)

def relocatable_binaries_preprocess(d):
    rpath_replace(d.expand('/opt/yocto/poky/qemuarm/tmp/work/x86_64-linux/gettext-minimal-native/0.18.3.2-r0/sysroot-destdir/'), d)

def rpath_replace (path, d):
    bindirs = d.expand("/opt/yocto/poky/qemuarm/tmp/sysroots/x86_64-linux/usr/bin /opt/yocto/poky/qemuarm/tmp/sysroots/x86_64-linux/usr/sbin /opt/yocto/poky/qemuarm/tmp/sysroots/x86_64-linux/sbin /opt/yocto/poky/qemuarm/tmp/sysroots/x86_64-linux/bin /opt/yocto/poky/qemuarm/tmp/sysroots/x86_64-linux/usr/lib /opt/yocto/poky/qemuarm/tmp/sysroots/x86_64-linux/lib /opt/yocto/poky/qemuarm/tmp/sysroots/x86_64-linux/usr/lib/gettext-minimal ").split()

    for bindir in bindirs:
        #bb.note ("Processing directory " + bindir)
        directory = path + "/" + bindir
        process_dir (path, directory, d)

def process_dir (rootdir, directory, d):
    import stat

    rootdir = os.path.normpath(rootdir)
    cmd = d.expand('chrpath')
    tmpdir = os.path.normpath(d.getVar('TMPDIR'))
    baseprefix = os.path.normpath(d.expand('/opt/yocto/poky/qemuarm/tmp/sysroots/x86_64-linux'))
    hostos = d.getVar("HOST_OS", True)

    #bb.debug("Checking %s for binaries to process" % directory)
    if not os.path.exists(directory):
        return

    if "linux" in hostos:
        process_file = process_file_linux
    elif "darwin" in hostos:
        process_file = process_file_darwin
    else:
        # Relocations not supported
        return

    dirs = os.listdir(directory)
    for file in dirs:
        fpath = directory + "/" + file
        fpath = os.path.normpath(fpath)
        if os.path.islink(fpath):
            # Skip symlinks
            continue

        if os.path.isdir(fpath):
            process_dir(rootdir, fpath, d)
        else:
            #bb.note("Testing %s for relocatability" % fpath)

            # We need read and write permissions for chrpath, if we don't have
            # them then set them temporarily. Take a copy of the files
            # permissions so that we can restore them afterwards.
            perms = os.stat(fpath)[stat.ST_MODE]
            if os.access(fpath, os.W_OK|os.R_OK):
                perms = None
            else:
                # Temporarily make the file writeable so we can chrpath it
                os.chmod(fpath, perms|stat.S_IRWXU)
            process_file(cmd, fpath, rootdir, baseprefix, tmpdir, d)

            if perms:
                os.chmod(fpath, perms)

